# <?= $this->className ?>  

<?= $this->classDescription->short ?>

<?php if ($this->classDescription->long) : ?>

<?= $this->classDescription->long ?>  
<?php endif ?>

<?php if ($interfaces = $this->classDescription->interfaces): ?>
## Implements:
<?php
$i = [];
foreach ($interfaces as $name => $link) {
  $i[] = $link ? "[$name]($link)" : $name;
}
?>
<?= join(', ', $i); ?>
<?php endif ?>


<?php if ($this->classDescription->parentClassName): ?>
## Extend:

<?= $this->classDescription->parentClassName ?>
<?php endif ?>


## Methods

| Name | Description |
|------|-------------|
<?php foreach ($this->methods as $name => $info) : ?>
|[<?= $name ?>](#<?= strtolower($this->classShortName.$name) ?>)|<?= $info->shortDescription ?>|
<?php endforeach ?>


<?php foreach ($this->methods as $name => $info) : ?>

### <?= $this->classShortName ?>::<?= $name ?>  

**Description**

```php
<?= $info->visibility ?> <?= $name ?> (<?= join(', ', $info->argumentsList) ?: 'void' ?>)
```

<?= $info->shortDescription ?> 

<?= str_replace("\n", "  \n", $info->longDescription) ?> 

**Parameters**

<?php if (!$info->argumentsDescription) : ?>
`This function has no parameters.`
<?php else : ?>
<?php foreach ($info->argumentsDescription as $param) : ?>
* `(<?= join('|', $param->type) ?>) <?= $param->name ?>`
<?php if ($param->desc) : ?>
: <?= str_replace("\n", "  \n", $param->desc) ?>  
<?php endif ?>
<?php endforeach ?>
<?php endif ?>

**Return Values**

<?php foreach ($info->returnValue as $param) : ?>
`<?= join('|', $param->type) ?>`

<?php if ($param->desc) : ?>
> <?= str_replace("\n", "  \n", $param->desc) ?>  
<?php endif ?>

<?php endforeach ?>


<?php endforeach ?>
